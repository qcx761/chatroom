1. res_check->next(); if (res_check->getInt(1) > 0) { ... }
res_check->next()：移动结果集指针到下一条记录（第一条）。

res_check->getInt(1)：从当前行的第1列取整数。

判断这个整数是否大于0。

适用场景

你已经知道查询结果集有多条数据或至少一条数据，先跳到第一条，然后根据某个字段值判断逻辑。

常用于查询中，第一列是计数或标志，比如SELECT COUNT(*) FROM table WHERE ...。

2. if (res->next()) { ... }
res->next()返回布尔值，表示结果集是否存在下一条记录。

这个写法常用于判断是否查询到了数据（即是否有记录）。

如果有记录，则进入if体，继续处理。

适用场景

用来判断查询结果是否非空。

适合取出结果集中的数据并处理。



| 查询类型                         | `res->next()` 是否足够判断有没有匹配记录？       |
| ---------------------------- | ---------------------------------- |
| ✅ `SELECT * FROM ...`        | **够用了**：返回 0 行时 `next()` 是 `false` |
| ❌ `SELECT COUNT(*) FROM ...` | **不够**：始终有 1 行，必须判断值是否 > 0         |


| 查询类型                             | 返回的行数       | 返回的列数    |
| -------------------------------- | ----------- | -------- |
| `SELECT * FROM users ...`        | 匹配的实际行数     | 表中的所有列   |
| `SELECT COUNT(*) FROM users ...` | **永远只 1 行** | 只有一列：统计数 |









用map来存储account与fd